21. ¿Qué diferencia hay entre "\t\n" y '\t\n'?
R: "\t\n" -> Ruby analiza la cadena y mostraría el texto con tabulador.
   '\t\n' -> Ruby no aliza la cadena y mostraría tal cual lo que está escrito.


22. ¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qué es %q{’a’ ’b’ ’c’}?
R: %q Equivale a ' ' (comillas simples)
   %q{hello world\n} -> Es una cadena: hello world \n
   %q{'a' 'b' 'c'}   -> ES una cadena: 'a' 'b' 'c'

 
23. ¿Cómo funciona %Q? ¿Qué es %Q{hello world\n}? ¿Qué es %Q{"a" "b" "c"}?
R: %Q Equivale a " " (comillas dobles)
   %Q{hello world\n} -> Es una cadena: hello world
   %Q{"a" "b" "c"}   -> Es una cadena: "a" "b" "c"


24. ¿Qué queda en c?
      irb(main):001:0> a = 4
      => 4
      irb(main):002:0> b =2
      => 2
      irb(main):003:0> c = <<HERE
      irb(main):004:0" --#{a}--
      irb(main):005:0" --#{b}--
      irb(main):006:0" HERE
R: => "--4--\n--2--\n"


25. ¿Qué queda en c?
      irb(main):001:0> a = 4
      => 4
      irb(main):002:0> b =2
      => 2
      irb(main):008:0> c = <<’HERE’
      irb(main):009:0’ --#{a}--
      irb(main):010:0’ --#{b}--
      irb(main):011:0’ HERE
R: "--\#{a}--\n--\#{b}--\n"


26. s = "hello". ¿Cuál es el valor de las siguientes expresiones?
        s[0,2]
        s[-1,1]
        s[0,10]
R: s[0,2] => "he"
   s[-1,1] => "o"
   s[0,10] => "hello"


27. ¿Qué queda en g?
    >> g = "hello"
    => "hello"
    >> g << " world"
R: => "hello world"


28. ¿Qué queda en e?
>> e = ’.’*3
R: => "..."


29. ¿Cuál es el resultado?
    >> a = 1
    => 1
    >> "#{a=a+1} "*3
R: => "2 2 2"


30. ¿Qué es esto? %w[this is a test]
R: => ["this", "is", "a", "test"]
   %w Permite crear una matriz de cadenas sin usar comillas y comas


31. ¿Qué es esto? %w[\t \n]
R: => ["\\t", "\\n"]


32. ¿Qué es esto? %W[\t \n]
R: => ["\t", "\n"]


33. ¿Qué contiene nils? nils = Array.new(3)
R: => [nil, nil, nil]


34. ¿Qué contiene zeros? zeros = Array.new(3, 0)
R: => [0, 0, 0]


35. ¿Qué queda en b?
    >> x = [[1,2],[3,4]]
    => [[1, 2], [3, 4]]
    >> b = Array.new(x)
R: => [[1, 2], [3, 4]]


36. ¿Qué queda en c?
>> c = Array.new(3) { |i| 2*i }
R: => [0, 2, 4]


37. ¿Cuál es el resultado de cada una de estas operaciones?
    >> a = (’a’..’e’).to_a
    => ["a", "b", "c", "d", "e"]
    >> a[1,1]
    => ["b"]
    >> a[-2,2]
    => ["d", "e"]
    >> a[0..2]
    => ["a", "b", "c"]
    >> a[0...1]
    => ["a"]
    >> a[-2..-1]
    => ["d", "e"]


38. ¿Cuál es el resultado de cada una de estas operaciones?
    >> a
    => ["a", "b", "c", "d", "e"]
    >> a[0,2] = %w{A B}
    => ["A", "B"]
    >> a
    => ["A", "B", "c", "d", "e"]
    >> a[2..5] = %w{C D E}
    => ["C", "D", "E"]
    >> a
    => ["A", "B", "C", "D", "E"]
    >> a[0,0] = [1,2,3]
    => [1, 2, 3]
    >> a
    => [1, 2, 3, "A", "B", "C", "D", "E"]
    >> a[0,2] = []
    => []
    >> a
    => [3, "A", "B", "C", "D", "E"]
    >> a[-1,1] = [ ’Z’ ]
    => ["Z"]
    >> a
    => [3, "A", "B", "C", "D", "Z"]
    >> a[-2,2] = nil
    => nil
    >> a
    => [3, "A", "B", "C"]


39. ¿Cuál es el resultado de cada una de estas operaciones?
    >> a = (1...4).to_a
    => [1, 2, 3]
    >> a = a + [4, 5]
    => [1, 2, 3, 4, 5]
    >> a += [[6, 7, 8]]
    => [1, 2, 3, 4, 5, [6, 7, 8]]
    >> a = a + 9
    >> a = a + 9 -> ERROR, no se puede convertir Fixnum en un Array


40. ¿Cuál es el resultado de cada una de estas operaciones?
    >> x = %w{a b c b a}
    => ["a", "b", "c", "b", "a"]
    >> x = x - %w{b c d}
    => ["a", "a"]


41. ¿Cuál es el resultado de cada una de estas operaciones?
    >> z = [0]*8
    => [0, 0, 0, 0, 0, 0, 0, 0]


42. ¿Cuál es el resultado de cada una de estas operaciones?
    >> a = []
    => []
    >> a << 1
    => [1]
    >> a << 2 << 3
    => [1, 2, 3]
    >> a << [4, 5, 6]
    => [1, 2, 3, [4, 5, 6]]
    >> a.concat [7, 8]
    => [1, 2, 3, [4, 5, 6], 7, 8]


43. ¿Cuál es el resultado de cada una de estas operaciones?
    >> a = [1, 1, 2, 2, 3, 3, 4]
    => [1, 1, 2, 2, 3, 3, 4]
    >> b = [5, 5, 4, 4, 3, 3, 2]
    => [5, 5, 4, 4, 3, 3, 2]
    >> c = a | b
    => [1, 2, 3, 4, 5]
    >> d = b | a
    => [5, 4, 3, 2, 1]
    >> e = a & b
    => [2, 3, 4]
    >> f = b & a
    => [4, 3, 2]


44. ¿Qué resultados dan las siguientes operaciones?
    >> a = 1..10
    => 1..10
    >> a.class
    => Range
    >> a.to_a
    => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    >> b = 1...10
    => 1....10
    >> b.to_a
    => [1, 2, 3, 4, 5, 6, 7, 8, 9]
    >> b.include? 10
    => false
    >> b.include? 8
    => true
    >> b.step(2) {|x| print "#{x} " }
       1 3 5 7 9 => 1...10
    >> 1..3.to_a
       ERROR de argumento: Valor erróneo para el rango


45. ¿Qué resultados dan las siguientes operaciones?
    >> r = 0...100
    => 0....100
    >> r.member? 50
    => true
    >> r.include? 99.9
    => true
    >> r.member? 99.9
    => true
R: Con dos puntos 0..100 -> Sí incluye al 100
   Con tres puntos 0...100 -> No incluye al 100


46. ¿Qué resultados dan las siguientes operaciones?
    >> true.class
    => TrueClass
    >> false.class
    => FalseClass
    >> puts "hello" if 0
    => hello
    >> puts "hello" if nil
    => nil
    >> puts "hello" if ""
    => hello


47. ¿Qué resultados dan las siguientes operaciones?
    >> x = :sym
    => :sym
    >> x.class
    => Symbol
    >> x == ’sym’
    => false
    >> x == :sym
    => true
    >> z = :’a long symbol’
    => :"a long symbol"
    >> z.class
    => Symbol
    >> x == ’sym’.to_sym
    => true
    >> x.to_s == ’sym’
    => true


48. ¿Qué resultados se dan?
    >> s = "Ruby"
    => "Ruby"
    >> t = s
    => "Ruby"
    >> t[-1] = ""
    => ""
    >> print s
    Rub
    >> t = "Java"
    => "Java"
    >> print s, t
    RubJava


49. ¿Cuál es el resultado?
    >> "%d %s" % [3, "rubies"]
    => "3 rubies"


50. ¿Cuáles son los resultados?
    >> x, y = 4, 5
    => [4, 5]
    >> z = x > y ? x : y
    => 5
    >> x,y,z = [1,2,3]
    => [1, 2, 3]


51. ¿Qué resultados dan las siguientes operaciones?
    >> x = { :a => 1, :b => 2 }
    => {:b=>2, :a=>1}
    >> x.keys
    => [:b, :a]
    >> x.values
    => [2, 1]
    >> x[:c] = 3
    => 3
    >> x
    => {:b=>2, :c=>3, :a=>1}
    >> x.delete(’a’)
    => nil
    >> x
    => {:b=>2, :c=>3, :a=>1}
    >> x.delete(:a)
    => 1
    >> x
    => {:b=>2, :c=>3}
    >> x = { :a => 1, :b => 2, :c => 4 }
    => {:b=>2, :c=>4, :a=>1}
    >> x.delete_if { |k,v| v % 2 == 0 }
    => {:a=>1}
    >> x
    => {:a=>1}


52. ¿Qué hace yield 4, 5?
R: Invoca al bloque usando los argumentos 4 y 5. 


53. ¿Qué hace la siguiente sentencia? counts = Hash.new(0) ¿Qué diferencia hay con la asignación counts = {}?
R: No hay ninguna diferencia, son dos formas distintas de crear un hash:
   counts = Hash.new(0)
   => {} #Crea un hash

   counts = {}
   => {} #Crea un hash


54. ¿Qué retorna esta expresión? ’hello world, hello LPP’.scan /\w+/
R: => ["hello", "world", "hello", "LPP"]


55. Explique que hacen estas sentencias:
     c = { :a => 3, :b => 2, :c => 1 } 
     => {:a=>3, :b=>2, :c=>1} #Se crea un Hash
     c.keys.sort.each { |k| puts c[k] }
     3
     2
     1
     => [:a, :b, :c] #Recorre las claves ordenadamente e imprime su valor asociado


56. Escriba la dirección del repositorio que ha creado en GitHub en la tarea habilitada en el campus virtual.
R: https://github.com/alu0100592368/prct03


